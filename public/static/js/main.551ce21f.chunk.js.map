{"version":3,"sources":["store/reducers/ChatStore.js","store/reducers/UserStore.js","store/reducers/index.js","store/AppStore.js","services/SocketService.js","store/actions/ChatActions.js","services/UserService.js","store/actions/UserActions.js","store/actions/index.js","pages/Chat.js","App.js","serviceWorker.js","index.js"],"names":["initialState","msgs","userTyping","currUser","rootReducer","combineReducers","chatStore","state","arguments","length","undefined","action","type","Object","assign","concat","toConsumableArray","payload","user","userStore","createStore","applyMiddleware","thunk","socket","io","on","txt","from","console","log","store","dispatch","ChatActions","addMsg","setUserTyping","SocketService","send","getState","emit","typing","stopTyping","sendMsg","sendUserTyping","sendUserStop","gUser","size","text","charAt","Math","floor","random","possible","i","_randomName","UserService","getUser","Promise","resolve","replace","l","toUpperCase","UserActions","loadUser","promptUser","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","stop","_x","apply","this","actions","objectSpread","Chat","typeTime","updateMsg","ev","_this","setState","target","value","Date","now","setTimeout","imSendMsg","preventDefault","props","prompt","userName","chat","map","msg","idx","react_default","createElement","className","key","autoFocus","onChange","onClick","Component","connect","App","pages_Chat","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.551ce21f.chunk.js","sourcesContent":["const initialState = {\n    msgs: [],\n    userTyping: ''\n}\n\nexport default (state = initialState, action) => {\n    // console.log('reducer: CHAT state: ', state, \", action.type: \", action)\n    switch (action.type) {\n        case 'pushToMsgs':\n            // return { msgs: [...state.msgs, action.payload], userTyping: `${state.userTyping}` };\n            return Object.assign(state, { msgs: [...state.msgs, action.payload] });\n        case 'changeUserTyping':\n            return { msgs: state.msgs, userTyping: action.payload.user };\n        default:\n            return state;\n    }\n}","const initialState = {\n    currUser: 'user2'\n}\n\nexport default (state = initialState, action) => {\n    // console.log('reducer: USER state: ', state, \", action.type: \", action)\n\n    switch (action.type) {\n        case 'setUser':\n            return { currUser: action.payload.user };\n        default:\n            return state;\n    }\n}\n\n","import ChatStore from './ChatStore'\nimport UserStore from './UserStore'\n\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    chatStore: ChatStore,\n    userStore: UserStore\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from \"./reducers\";\n\nexport default createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);","import io from 'socket.io-client'\r\nimport ChatActions from '../store/actions/ChatActions';\r\n\r\nimport store from '../store/AppStore.js'\r\n\r\nconst serverUrl = process.env.NODE_ENV !== 'development' ?\r\n  '' : '//localhost:9090';\r\n\r\nvar socket = io(serverUrl);\r\n\r\nconnectSocket();\r\nfunction connectSocket() {\r\n  socket.on('chat new msg', (txt, from) => {\r\n    console.log(`'${from}' send massage: ${txt}`)\r\n    // actions.addMsg(txt, from)\r\n    store.dispatch(ChatActions.addMsg(txt, from))\r\n  });\r\n\r\n  socket.on('other user type', (user) => {\r\n    if (user) {\r\n      store.dispatch(ChatActions.setUserTyping(user))\r\n    } else {\r\n      store.dispatch(ChatActions.setUserTyping(''))\r\n    }\r\n  });\r\n}\r\n\r\nconst send = (txt) => {\r\n  var currUser = store.getState().userStore.currUser;\r\n  socket.emit('msg sent', txt, currUser);\r\n}\r\nconst typing = () => {\r\n  socket.emit('user type', store.getState().userStore.currUser);\r\n}\r\nconst stopTyping = () => {\r\n  socket.emit('user type', '');\r\n}\r\n\r\nexport default {\r\n  send,\r\n  typing,\r\n  stopTyping\r\n}\r\n","import SocketService from '../../services/SocketService';\n\n\nfunction sendMsg(txt) {\n    SocketService.send(txt);\n    // return { type: '', payload: { } };\n}\nfunction sendUserTyping() {\n    SocketService.typing();\n    // return { type: '', payload: { } };\n}\nfunction sendUserStop() {\n    SocketService.stopTyping();\n    // return { type: '', payload: { } };\n}\n\n\nfunction addMsg(txt, from) {\n    return {\n        type: 'pushToMsgs',\n        payload: { txt, from }\n    }\n}\nfunction setUserTyping(user) {\n    return {\n        type: 'changeUserTyping',\n        payload: { user }\n    }\n}\n\nexport default {\n    sendMsg,\n    sendUserTyping,\n    addMsg,\n    sendUserStop,\n    setUserTyping\n}","// import StorageService from './StorageService';\n\n// const USER_KEY = 'user-react-chat';\nvar gUser = _randomName();\n\nfunction getUser(user) {\n    // var currUser = StorageService.load(USER_KEY);\n    // return Promise.resolve(currUser);\n    if (user) {\n        return Promise.resolve(user.replace(/\\b\\w/g, l => l.toUpperCase()));\n    } else {\n        return Promise.resolve(gUser);\n    }\n}\n\nexport default {\n    getUser,\n}\n\nfunction _randomName(size = 4) {\n    var text = \"\";\n    var possibleUp = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    text += possibleUp.charAt(Math.floor(Math.random() * possibleUp.length));\n\n    var possible = \"aaabcdeeeefghiiiijklmnoooopqrstuuuuvwxyz\";\n    for (var i = 0; i < size - 1; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n}","import UserService from '../../services/UserService';\n\n// function loadUser() {\n//   return (dispatch) => {\n//     UserService.getUser()\n//       .then((user) => dispatch({ type: 'setUser', payload: { user } }))\n//   }\n// }\nfunction loadUser(promptUser) {\n  return async (dispatch) => {\n    const user = await UserService.getUser(promptUser);\n    dispatch({ type: 'setUser', payload: { user } })\n  }\n}\n\nexport default {\n  loadUser,\n}","import ChatActions from './ChatActions';\nimport UserActions from './UserActions';\n\nexport default {\n    ...ChatActions,\n    ...UserActions\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport actions from '../store/actions';\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n    text: '',\r\n    typeTime: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props)\r\n    // actions.loadUser();\r\n    var user = prompt('Please enter your name');\r\n    this.props.loadUser(user);\r\n  }\r\n\r\n  updateMsg = (ev) => {\r\n    this.setState({ text: ev.target.value, typeTime: Date.now() });\r\n    if (Date.now() - this.state.typeTime > 250) {\r\n      actions.sendUserTyping();\r\n      // this.props.sendUserTyping();\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (Date.now() - this.state.typeTime > 1000) {\r\n        actions.sendUserStop();\r\n        // this.props.sendUserStop();\r\n      }\r\n    }, 1200)\r\n  }\r\n\r\n  imSendMsg = (ev) => {\r\n    ev.preventDefault();\r\n    if (this.state.text) {\r\n      actions.sendMsg(this.state.text);\r\n      // this.props.sendMsg(this.state.text);\r\n      this.setState({ text: '' });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var userName = this.props.currUser;\r\n    var userTyping = this.props.userTyping;\r\n    var massages = this.props.msgs;\r\n    const chat = massages.map((msg, idx) => (\r\n      <li className={userName === msg.from ? 'own' : 'else'} key={idx}>\r\n        <label className=\"user\">{msg.from}</label>\r\n        <label>{msg.txt}</label>\r\n      </li>\r\n    ));\r\n    return (\r\n      <section className=\"homePage\">\r\n\r\n        <h1>{userName}, Welcome to Chat!</h1>\r\n\r\n        {userTyping &&\r\n          <div className=\"type-area\">{userTyping} typing...</div>\r\n        }\r\n        {!userTyping &&\r\n          <div className=\"type-area\"></div>\r\n        }\r\n\r\n        <form className=\"msg-form\">\r\n          <input autoFocus value={this.state.text} onChange={this.updateMsg} type=\"text\" />\r\n          <button onClick={this.imSendMsg}>SEND</button>\r\n        </form>\r\n\r\n        <ul className=\"msg-list\">{chat}</ul>\r\n\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  console.log(state)\r\n  return {\r\n    msgs: state.chatStore.msgs,\r\n    userTyping: state.chatStore.userTyping,\r\n    currUser: state.userStore.currUser\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, actions)(Chat)","import React, { Component } from 'react';\nimport './assets/css/App.scss';\n\nimport Chat from './pages/Chat';\n\nclass App extends Component {\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/AppStore';\n\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}